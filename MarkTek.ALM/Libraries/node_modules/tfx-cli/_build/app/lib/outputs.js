/// <reference path="../../typings/tsd.d.ts" />
"use strict";
var path = require("path");
var Q = require("q");
var qfs = require("./qfs");
var qread = require("./qread");
var JsonOutputter = (function () {
    function JsonOutputter(options) {
        this.minify = false;
        if (options) {
            this.minify = options.minify;
        }
    }
    JsonOutputter.prototype.processOutput = function (data) {
        try {
            JSON.stringify(data, null, this.minify ? 0 : 4);
        }
        catch (e) {
            throw new Error("Error processing JSON");
        }
    };
    return JsonOutputter;
}());
exports.JsonOutputter = JsonOutputter;
(function (FileOverwriteOption) {
    /**
     * Prompt the user before overwriting
     */
    FileOverwriteOption[FileOverwriteOption["Prompt"] = 0] = "Prompt";
    /**
     * Throw an exception if the file exists
     */
    FileOverwriteOption[FileOverwriteOption["Throw"] = 1] = "Throw";
    /**
     * Overwrite the file without warning/prompting
     */
    FileOverwriteOption[FileOverwriteOption["Overwrite"] = 2] = "Overwrite";
    /**
     * Append output to the given file
     */
    FileOverwriteOption[FileOverwriteOption["Append"] = 3] = "Append";
})(exports.FileOverwriteOption || (exports.FileOverwriteOption = {}));
var FileOverwriteOption = exports.FileOverwriteOption;
var FileOutputter = (function () {
    function FileOutputter(outputPath, options) {
        this.outputPath = outputPath;
        if (options.overwrite === undefined || options.overwrite === null) {
            this.overwriteSetting = FileOverwriteOption.Prompt;
        }
        else {
            this.overwriteSetting = options.overwrite;
        }
    }
    /**
     * Given a file path:
     *   - Convert it to an absolute path
     *   - If it exists, warn the user it will be overwritten
     *   - If it does not exist and the original file path was relative, confirm the absolute path with user
     *   - Otherwise continue.
     * User has the option during confirmations to change path, in which the above process happens again.
     * Once we have the file, check that we have write access. If not, ask for a new file name and re-do all of the above.
     */
    FileOutputter.prototype.confirmPath = function (outPath, confirmRelative) {
        var _this = this;
        if (confirmRelative === void 0) { confirmRelative = false; }
        var absPath = path.resolve(outPath);
        return qfs.exists(absPath).then(function (exists) {
            if (!exists && (!confirmRelative || path.isAbsolute(outPath))) {
                return Q.resolve(absPath);
            }
            if (exists && _this.overwriteSetting === FileOverwriteOption.Throw) {
                throw new Error("Cannot overwrite existing file " + _this.outputPath);
            }
            if (exists && _this.overwriteSetting === FileOverwriteOption.Overwrite || _this.overwriteSetting === FileOverwriteOption.Append) {
                return Q.resolve(absPath);
            }
            var prompt = exists ?
                "Warning: " + absPath + " will be overwritten. Continue? (y/n or provide another file name.)" :
                "Write to " + absPath + "? (y/n or provide another file name.)";
            return qread.read("overwrite", prompt).then(function (result) {
                var lcResult = result.toLowerCase();
                if (["y", "yes"].indexOf(lcResult) >= 0) {
                    return Q.resolve(result);
                }
                else if (["n", "no"].indexOf(lcResult) >= 0) {
                    throw new Error("Operation canceled by user.");
                }
                else {
                    return _this.confirmPath(result, true);
                }
            });
        }).then(function (confirmedPath) {
            return qfs.fileAccess(confirmedPath, qfs.W_OK).then(function (access) {
                if (access) {
                    return confirmedPath;
                }
                else {
                    if (_this.overwriteSetting === FileOverwriteOption.Throw) {
                        throw new Error("Cannot write to file " + _this.outputPath + " (access denied).");
                    }
                    return qread.read("filename", "No write access to file " + confirmedPath + ". Provide a new file name.").then(function (result) {
                        return _this.confirmPath(result, true);
                    });
                }
            });
        });
    };
    /**
     * Write the given string of data to the file
     */
    FileOutputter.prototype.processOutput = function (data) {
        var _this = this;
        return this.confirmPath(this.outputPath).then(function (confirmed) {
            var dataPromise = Q.resolve(data);
            if (_this.overwriteSetting === FileOverwriteOption.Append) {
                dataPromise = qfs.readFile(confirmed, "utf8").then(function (result) {
                    return result + data;
                }).catch(function (e) {
                    return data;
                });
            }
            return dataPromise.then(function (data) {
                return qfs.writeFile(confirmed, data);
            });
        });
    };
    return FileOutputter;
}());
exports.FileOutputter = FileOutputter;
